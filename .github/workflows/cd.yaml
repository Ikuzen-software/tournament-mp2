name: CD
# This workflow is triggered on pushes to the repository.
on: 
  push:
    branches:
      - master

jobs:
  deploy-app:
    name: Build App and Deploy
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_CICD_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_CICD_SECRET_KEY }}
          aws-region: us-east-1
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Build App
        run: |
          cd app
          npm ci
          npm run build -- --prod
      - name: Deploy static site to S3 bucket and invalidate cache
        run: |
          aws s3 sync app/dist/* s3://treenament.com --delete
          aws cloudfront create-invalidation --distribution-id ${{secrets.CLOUDFRONT_DISTRIBUTION}} --paths /*

  deploy-back:
    name: Build Back and Deploy
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_CICD_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_CICD_SECRET_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: treenament-backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG back
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Restart ECS Service
        run: |
          export SERVICE=$(aws ecs list-services --cluster treenament-dev --query serviceArns[0] --output text | awk -F'/' '{print $3}')
          export CLUSTER=$(aws ecs list-clusters --query clusterArns[0] --output text | awk -F'/' '{print $2}')
          aws ecs update-service --force-new-deployment --service ${SERVICE} --cluster ${CLUSTER}
